{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Gaming/Desktop/html/product-feedback/src/utils/db.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGO_URI = process.env.MONGO_URI;\r\n\r\nexport const connectDB = async () => {\r\n  if (mongoose.connection.readyState >= 1) return;\r\n  try {\r\n    await mongoose.connect(MONGO_URI);\r\n    console.log(\"Mongo Connected\");\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AAEhC,MAAM,YAAY;IACvB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;IACzC,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;IAChB;AACF","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Gaming/Desktop/html/product-feedback/models/ProductRequest.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst productRequestSchema = new mongoose.Schema(\r\n  {\r\n    title: String,\r\n    category: String,\r\n    upvotes: Number,\r\n    status: String,\r\n    description: String,\r\n    comments: [\r\n      {\r\n        content: String,\r\n        user: {\r\n          image: String,\r\n          name: String,\r\n          username: String,\r\n        },\r\n        replies: [\r\n          {\r\n            content: String,\r\n            replyingTo: String,\r\n            user: {\r\n              image: String,\r\n              name: String,\r\n              username: String,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    userId: String,\r\n    user: { type: mongoose.Schema.Types.ObjectId, ref: \"GuestUser\" },\r\n    isSeed: { type: Boolean, default: false },\r\n    isPublic: { type: Boolean, default: false },\r\n    publicId: String,\r\n    upvotedBy: [{ type: String }],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport default mongoose.models.ProductRequest ||\r\n  mongoose.model(\"ProductRequest\", productRequestSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,uBAAuB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAC9C;IACE,OAAO;IACP,UAAU;IACV,SAAS;IACT,QAAQ;IACR,aAAa;IACb,UAAU;QACR;YACE,SAAS;YACT,MAAM;gBACJ,OAAO;gBACP,MAAM;gBACN,UAAU;YACZ;YACA,SAAS;gBACP;oBACE,SAAS;oBACT,YAAY;oBACZ,MAAM;wBACJ,OAAO;wBACP,MAAM;wBACN,UAAU;oBACZ;gBACF;aACD;QACH;KACD;IACD,QAAQ;IACR,MAAM;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;IAAY;IAC/D,QAAQ;QAAE,MAAM;QAAS,SAAS;IAAM;IACxC,UAAU;QAAE,MAAM;QAAS,SAAS;IAAM;IAC1C,UAAU;IACV,WAAW;QAAC;YAAE,MAAM;QAAO;KAAE;AAC/B,GACA;IAAE,YAAY;AAAK;uCAGN,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,cAAc,IAC3C,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,kBAAkB","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Gaming/Desktop/html/product-feedback/src/lib/getFeedbackById.js"],"sourcesContent":["import { connectDB } from \"../utils/db\";\r\nimport ProductRequest from \"../../models/ProductRequest\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport async function getFeedbackById(id) {\r\n  await connectDB();\r\n  if (!mongoose.Types.ObjectId.isValid(id)) return null;\r\n\r\n  const feedback = await ProductRequest.findById(id).lean();\r\n  return feedback;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,gBAAgB,EAAE;IACtC,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;IACd,IAAI,CAAC,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,OAAO;IAEjD,MAAM,WAAW,MAAM,wHAAA,CAAA,UAAc,CAAC,QAAQ,CAAC,IAAI,IAAI;IACvD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Gaming/Desktop/html/product-feedback/src/lib/generateParams.js"],"sourcesContent":["import { connectDB } from \"../utils/db\";\r\nimport ProductRequest from \"../../models/ProductRequest\";\r\n\r\nexport async function generateParamsFromFeedbacks() {\r\n  await connectDB();\r\n  const feedbacks = await ProductRequest.find({}, \"_id\");\r\n  return feedbacks.map((f) => ({ id: f._id.toString() }));\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;IACd,MAAM,YAAY,MAAM,wHAAA,CAAA,UAAc,CAAC,IAAI,CAAC,CAAC,GAAG;IAChD,OAAO,UAAU,GAAG,CAAC,CAAC,IAAM,CAAC;YAAE,IAAI,EAAE,GAAG,CAAC,QAAQ;QAAG,CAAC;AACvD","debugId":null}}]
}